### EKF Configuration for Sensor Fusion
### Fuses wheel odometry (/odom) with IMU data (/imu/data) to correct for wheel slippage
### Outputs fused odometry on /odometry/filtered

ekf_filter_node:
  ros__parameters:
    # Frequency at which the filter publishes (Hz)
    # Lowered to 10Hz for Raspberry Pi - EKF takes ~0.2s per cycle
    # This matches odometry rate and prevents blocking velocity commands
    frequency: 10.0

    # The filter can operate in 2D (false) or 3D (true) mode
    # For differential drive on flat ground, 2D is appropriate
    two_d_mode: true

    # Transform publication settings
    publish_tf: true
    publish_acceleration: false

    # Predict to current time to reduce latency
    predict_to_current_time: true

    # Map frame name (for localization/SLAM integration)
    map_frame: map
    odom_frame: odom
    base_link_frame: base_link
    world_frame: odom # For odometry-only fusion (not SLAM localization)

    # ---------------------------------------------
    # Input Source 1: Wheel Odometry (/odom)
    # ---------------------------------------------
    odom0: /odom
    odom0_config: [
        true,
        true,
        false, # x, y, z position (USE position as reference - prevents unbounded drift)
        false,
        false,
        false, # roll, pitch, yaw orientation (DON'T use encoder yaw - slips during turns)
        true,
        true,
        false, # x_vel, y_vel, z_vel (USE wheel velocities - accurate for motion)
        false,
        false,
        false, # roll_vel, pitch_vel, yaw_vel (DISABLED - let IMU yaw handle rotation)
        false,
        false,
        false, # x_accel, y_accel, z_accel
      ]
    odom0_queue_size: 2 # Reduced from 10 to minimize processing
    odom0_differential: false # Use absolute measurements
    odom0_relative: false

    # CRITICAL: We MUST provide position to prevent unbounded drift
    # EKF needs an anchor point - can't just integrate velocities forever
    # Position covariance (0.01) tells EKF "trust this reasonably for location"
    # Yaw covariance (0.5) tells EKF "DON'T trust this for rotation - use IMU instead"

    # ---------------------------------------------
    # Input Source 2: IMU (/imu/data)
    # ---------------------------------------------
    imu0: /imu/data
    imu0_config: [
        false,
        false,
        false, # x, y, z position (IMU doesn't provide position)
        false,
        false,
        true, # roll, pitch, yaw orientation (ONLY USE yaw/Z - stable from DMP)
        false,
        false,
        false, # x_vel, y_vel, z_vel
        false,
        false,
        false, # roll_vel, pitch_vel, yaw_vel (DISABLED - too noisy, causes drift)
        false,
        false,
        false, # x_accel, y_accel, z_accel - DISABLED (not needed for 2D)
      ]
    imu0_queue_size: 2 # Reduced from 10 to minimize processing
    imu0_differential: false
    imu0_relative: false

    # Remove gravitational acceleration from IMU data
    imu0_remove_gravitational_acceleration: false # Disabled since we're not using accel data

    # IMU provides stable yaw orientation from DMP - NO drift like gyro integration
    # Covariance (0.01) tells EKF "trust this for rotation - it's from magnetometer/DMP"
    # This corrects the encoder's bad yaw estimate (which drifts during turns)

    # ---------------------------------------------
    # Process Noise Covariance
    # ---------------------------------------------
    # How much we expect the state to change between measurements
    # Tune these if the filter is too "jumpy" (decrease) or too "sluggish" (increase)
    process_noise_covariance: [
        0.05,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0, # x
        0.0,
        0.05,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0, # y
        0.0,
        0.0,
        0.06,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0, # z
        0.0,
        0.0,
        0.0,
        0.03,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0, # roll
        0.0,
        0.0,
        0.0,
        0.0,
        0.03,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0, # pitch
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.06,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0, # yaw
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.025,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0, # x_vel
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.025,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0, # y_vel
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.04,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0, # z_vel
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.01,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0, # roll_vel
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.01,
        0.0,
        0.0,
        0.0,
        0.0, # pitch_vel
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.02,
        0.0,
        0.0,
        0.0, # yaw_vel
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.01,
        0.0,
        0.0, # x_accel
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.01,
        0.0, # y_accel
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.015, # z_accel
      ]

    # ---------------------------------------------
    # Initial State Covariance
    # ---------------------------------------------
    initial_estimate_covariance:
      [
        1e-9,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1e-9,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1e-9,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1e-9,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1e-9,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1e-9,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1e-9,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1e-9,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1e-9,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1e-9,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1e-9,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1e-9,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1e-9,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1e-9,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1e-9,
      ]
